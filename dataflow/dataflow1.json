{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json4",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer,",
				"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['/weatherhistory/data_*.json']) ~> source1",
				"flatten1 derive(timestamp = iif(length(toString(timestamp)) > 10, 0, toInteger(timestamp))\r",
				",",
				"          city_id = \"Boston\") ~> derivedColumn1",
				"source1 foldDown(unroll(list),",
				"     mapColumn(",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          clouds_all = list.clouds.all,",
				"          timestamp = list.dt,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_min = list.main.temp_min,",
				"          temp_max = list.main.temp_max,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          wind_deg = list.wind.deg,",
				"          wind_speed = list.wind.speed",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"derivedColumn1 filter(ERROR_FUNCTION('!isNull(temp)__NEW_LINE_N__!isNull(humidity)__NEW_LINE_N__!isNull(timestamp)')) ~> filter1"
			]
		}
	}
}